<?php

/**
 * @file
 */

/**
 * Implements hook_commerce_payment_method_info_alter()
 */
function commerce_alipay_logistics_commerce_payment_method_info_alter(&$payment_methods) {
  $payment_methods['alipay']['callbacks']['settings_form'] = 'commerce_alipay_logistics_settings_form';
}

/**
 * Payment method callback: settings form.
 * Override commerce_alipay_settings_form() to insert logistics settings
 */
function commerce_alipay_logistics_settings_form($settings = NULL) {
  $form = commerce_alipay_settings_form($settings);
  $form['receive_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Receive settings'),
    '#states' => array(
      'visible' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][service]"]' => array(
          array('value' => 'create_partner_trade_by_buyer'),
          array('value' => 'trade_create_by_buyer'),
        ),
      ),
    ),
  );

  $shipping_fields = field_info_instances('commerce_customer_profile', 'shipping');
  $field_options = array('0' => t('--Empty--'));
  foreach (array_keys($shipping_fields) as $machine_name) {
    $field_options[$machine_name] = $machine_name;
  }

  $form['receive_settings']['mobile_field'] = array(
    '#type' => 'select',
    '#title' => t('Mobile field'),
    '#description' => t('Specify a field, identifies receive mobile'),
    '#default_value' => isset($settings['receive_settings']['mobile_field']) ? $settings['receive_settings']['mobile_field'] : 0,
    '#options' => $field_options,
  );
  $form['receive_settings']['phone_field'] = array(
    '#type' => 'select',
    '#title' => t('Phone field'),
    '#description' => t('Specify a field, identifies receive phone number'),
    '#default_value' => isset($settings['receive_settings']['phone_field'])?$settings['receive_settings']['phone_field']:0,
    '#options' => $field_options,
  );

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function commerce_alipay_logistics_form_commerce_order_ui_order_form_alter(&$form, &$form_state, $form_id) {
  $wrapper_id = 'logistics-info-container';
  $form['logistics'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logistics Info'),
    '#prefix' => '<div id="' . $wrapper_id . '">',
    '#suffix' => '</div>',
  );

  $form['logistics']['commerce_order_logistics_no'] = $form['commerce_order_logistics_no'];
  $form['logistics']['commerce_order_logistics_company'] = $form['commerce_order_logistics_company'];

  unset($form['commerce_order_logistics_no']);
  unset($form['commerce_order_logistics_company']);

  $form['logistics']['actions'] = array();

  $form['logistics']['actions']['logistics_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'commerce_alipay_logistics_send_info',
      'wrapper' => $wrapper_id,
    ),
    '#validate' => array('commerce_alipay_logistics_send_validate'),
    '#submit' => array('commerce_alipay_logistics_send_submit'),
  );

  if ($form_state['commerce_order']->status == 'wait_buyer_confirm') {
    $form['logistics']['commerce_order_logistics_no']['#disabled'] = TRUE;
    $form['logistics']['commerce_order_logistics_company']['#disabled'] = TRUE;
    $form['logistics']['actions']['logistics_submit']['#disabled'] = TRUE;
  }
}

/**
 * Validate the logistics info in order
 */
function commerce_alipay_logistics_send_validate($form, &$form_state) {
  $order = $form_state['commerce_order'];
  $values = $form_state['values'];

  if ($order->status != 'wait_send_goods') {
    form_set_error('', t('Order status must be "Wait send goods"'));
  }
  if (empty($values['commerce_order_logistics_no']['und']['0']['value'])) {
    form_set_error('commerce_order_logistics_no[und][0][value]', t('Logistics number reqiured'));
  }
  if (empty($values['commerce_order_logistics_company']['und']['0']['tid'])) {
    form_set_error('commerce_order_logistics_company[und]', t('Logistics company reqiured'));
  }
}

function commerce_alipay_logistics_send_submit($form, $form_state) {
  $order = $form_state['commerce_order'];
  $values = $form_state['values'];

  // logistics nubmer
  $logistics_no = $values['commerce_order_logistics_no']['und']['0']['value'];

  $logistics_company_term = taxonomy_term_load($values['commerce_order_logistics_company']['und']['0']['tid']);
  $logistics_company = $logistics_company_term->name;

  commerce_alipay_logistics_api_invoke($order, $logistics_no, $logistics_company);
}

/**
 * Process data of order and send the request
 */
function commerce_alipay_logistics_api_invoke($order, $logistics_no, $logistics_company) {
  $transaction = commerce_alipay_logistics_load_pending_transaction_by_order($order);

  if (empty($transaction)) {
    form_set_error('', t('Please check this order payment methods.'));
    return FALSE;
  }

  $rules = rules_config_load('commerce_payment_alipay');
  $payment_instance_id = commerce_payment_method_instance_id('alipay', $rules);
  $payment_method = commerce_payment_method_instance_load($payment_instance_id);

  $settings = $payment_method['settings'];

  $data = array(
    "service" => "send_goods_confirm_by_platform",
    "partner" => $settings['partner'],
    "trade_no"	=> $transaction['remote_id'],
    "logistics_name" => $logistics_company,
    "invoice_no" => $logistics_no,
    "transport_type" => 'EXPRESS',
    "_input_charset" => strtolower('utf-8')
  );
  $data['sign'] = commerce_alipay_sign($settings['key'], $data);
  $data['sign_type'] = 'MD5';

  _commerce_alipay_logistics_send_request($data);
}

/**
 * preprocess params and merge main api config
 * @param $params
 */
function _commerce_alipay_logistics_send_request($params) {
  $curl = curl_init('https://mapi.alipay.com/gateway.do?_input_charset=UTF-8');
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);//SSL证书认证
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 2);//严格认证
  curl_setopt($curl, CURLOPT_CAINFO, drupal_get_path('module', 'commerce_alipay_logistics') . '/cacert.pem');//证书地址
  curl_setopt($curl, CURLOPT_HEADER, 0 ); // 过滤HTTP头
  curl_setopt($curl,CURLOPT_RETURNTRANSFER, 1);// 显示输出结果
  curl_setopt($curl,CURLOPT_POST,true); // post传输数据
  curl_setopt($curl,CURLOPT_POSTFIELDS,$params);// post传输数据
  $response = curl_exec($curl);
  if (empty($response)) {
    watchdog('commerce_alipay_logistics', 'CUrl error: %curl_error', array('%curl_error' => curl_error($curl)), WATCHDOG_ERROR);
    curl_close($curl);
    return FALSE;
  }
  curl_close($curl);

  $xml = simplexml_load_string($response);
  if (!empty($xml)) {
    if ($xml->is_success == 'T') {
      drupal_set_message(t('Logistics send success'), 'status');
      return TRUE;
    }
    else {
      drupal_set_message(t('Remote error: %error', array('%error' => $xml->error)), 'error');
      return FALSE;
    }
  }
  else {
    drupal_set_message(t('Logistics send failure, please check the log'), 'error');
    watchdog('commerce_alipay_logistics', 'xml parse error: %response', array('%response' => $response), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Send logistics info to alipay
 */
function commerce_alipay_logistics_send_info($form, $form_state) {
  return $form['logistics'];
}

/**
 * Load last payment transaction by order
 * @param stdClass $order
 * @return
 * Payment transaction of this order
 */
function commerce_alipay_logistics_load_pending_transaction_by_order($order) {
  $query = db_select('commerce_payment_transaction', 'cpt')->fields('cpt')
    ->condition('cpt.order_id', $order->order_id)
    ->condition('cpt.status', 'pending')
    ->condition('cpt.remote_status', 'WAIT_SELLER_SEND_GOODS');

  return $query->execute()->fetchAssoc();
}

/**
 * alipay support trade_create_by_buyer alter
 */
function commerce_alipay_logistics_commerce_alipay_parameter_alter(&$data, $settings, $order) {
  if ($settings['service'] == 'trade_create_by_buyer' || $settings['service'] == 'create_partner_trade_by_buyer') {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    $logistics_fee = 0;

    if ($settings['debug'] != TRUE) {
      // 快递费用只可以有一个，取最后一个。
      foreach ($order_wrapper->commerce_line_items as $line_item) {
        if ($line_item->type->value() == 'shipping') {
          $commerce_total = $line_item->commerce_total->value();
          $logistics_fee = commerce_currency_amount_to_decimal($commerce_total['amount'], $commerce_total['currency_code']);
        }
      }
    }

    $data['price'] = $data['total_fee'] - $logistics_fee;
    $data['quantity'] = 1;

    $data['logistics_type'] = 'EXPRESS';
    $data['logistics_fee'] = number_format($logistics_fee, 2);
    $data['logistics_payment'] = 'BUYER_PAY';

    // receive infos
    if (isset($order_wrapper->commerce_customer_shipping)) {

      $shipping = $order_wrapper->commerce_customer_shipping;

      $address = $shipping->get('commerce_customer_address')->value();

      if ($address) {
        $data['receive_name'] = $address['name_line'];
        $data['receive_address'] = $address['administrative_area'] . $address['locality'] . $address['thoroughfare'] . $address['premise'];
        $data['receive_zip'] = $address['postal_code'];

        if (isset($settings['receive_settings']['phone_field']) && !empty($settings['receive_settings']['phone_field'])) {
          $data['receive_phone'] = $shipping->{$settings['receive_settings']['phone_field']}->value();
        }
        if (isset($settings['receive_settings']['mobile_field']) && !empty($settings['receive_settings']['mobile_field'])) {
          $data['receive_mobile'] = $shipping->{$settings['receive_settings']['mobile_field']}->value();
        }
      }
    }
  }
}
